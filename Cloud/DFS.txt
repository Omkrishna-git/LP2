
public class DFS {
    public String graphInput { get; set; }
    public String dfsResult { get; set; }

    // Constructor
    public DFS() {
        graphInput = '';
        dfsResult = '';
    }

    // Perform DFS Traversal
    public void performDFS() {
        try {
            // Parse the graph input (Adjacency List format)
            Map<String, List<String>> graph = parseGraphInput(graphInput);
            if (graph.isEmpty()) {
                dfsResult = 'Error: Invalid graph input.';
                return;
            }

            // Perform DFS on the graph
            Set<String> visited = new Set<String>();
            String result = dfs(graph, graph.keySet().iterator().next(), visited);

            // Set the result for output
            dfsResult = 'DFS Traversal: ' + result;
        } catch (Exception e) {
            dfsResult = 'Error: ' + e.getMessage();
        }
    }

    // Helper method to perform DFS traversal
    private String dfs(Map<String, List<String>> graph, String node, Set<String> visited) {
        visited.add(node);
        String result = node;

        for (String neighbor : graph.get(node)) {
            if (!visited.contains(neighbor)) {
                result += ' -> ' + dfs(graph, neighbor, visited);
            }
        }

        return result;
    }

    // Helper method to parse the graph input (Adjacency List)
    private Map<String, List<String>> parseGraphInput(String input) {
        Map<String, List<String>> graph = new Map<String, List<String>>();
        String[] lines = input.split('\n');
        
        for (String line : lines) {
            // Skip empty lines or whitespace
            if (String.isBlank(line)) continue;

            String[] parts = line.split(':');
            if (parts.size() != 2) continue;

            String node = parts[0].trim();
            String[] neighbors = parts[1].split(',');

            List<String> neighborList = new List<String>();
            for (String neighbor : neighbors) {
                neighborList.add(neighbor.trim());
            }

            graph.put(node, neighborList);
        }

        return graph;
    }
}



********************************************************************************


<apex:page controller="DFS">
    <apex:stylesheet value="//cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"/>

    <style>
        body {
            font-family: 'Segoe UI', sans-serif;
            background-color: #f4f6f7;
            padding: 30px;
        }
        h1 {
            text-align: center;
            color: #2E86C1;
            margin-bottom: 30px;
        }
        .form-label {
            font-weight: bold;
            color: #34495E;
            margin-top: 10px;
        }
        .page-wrapper {
            max-width: 600px;
            margin: auto;
            background-color: #ffffff;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        .convert-button {
            background-color: #2E86C1;
            color: white;
            font-weight: bold;
            border: none;
            padding: 10px 20px;
            margin-top: 15px;
            border-radius: 6px;
            font-size: 15px;
        }
        .convert-button:hover {
            background-color: #1B4F72;
            cursor: pointer;
        }
        .result-section {
            text-align: center;
            margin-top: 20px;
            font-size: 18px;
            color: #1C2833;
            font-weight: bold;
        }
        .input-textarea {
            width: 100%;
            padding: 6px;
            height: 150px;
            resize: none;
        }
    </style>

    <apex:form>
        <div class="page-wrapper">
            <h1><i class="fas fa-project-diagram"></i> Depth-First Search (DFS)</h1>
            <apex:pageBlock title="DFS Traversal">
                <apex:pageBlockSection columns="1">
                    <apex:outputLabel value="Enter Graph (Adjacency List):" styleClass="form-label"/>
                    <!-- Changed apex:textarea to apex:inputTextarea -->
                    <apex:inputTextarea value="{!graphInput}" styleClass="input-textarea"/>

                    <apex:commandButton value="Perform DFS" action="{!performDFS}" rerender="resultPanel" styleClass="convert-button"/>
                </apex:pageBlockSection>
            </apex:pageBlock>

            <apex:outputPanel id="resultPanel" styleClass="result-section">
                <apex:outputText rendered="{!NOT(ISNULL(dfsResult))}" value="{!dfsResult}" />
            </apex:outputPanel>
        </div>
    </apex:form>
</apex:page>


------------------------------------------------------------------

A: B, C;
B: A, D;
C: A;
D: B;


1: 2, 3;
2: 1, 4;
3: 1;
4: 2;
